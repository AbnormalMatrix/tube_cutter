// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.10.0.

// ignore_for_file: unused_import, unused_element, unnecessary_import, duplicate_ignore, invalid_use_of_internal_member, annotate_overrides, non_constant_identifier_names, curly_braces_in_flow_control_structures, prefer_const_literals_to_create_immutables, unused_field

import 'api/cut.dart';
import 'api/gcode.dart';
import 'api/sender.dart';
import 'api/settings.dart';
import 'api/simple.dart';
import 'api/status.dart';
import 'dart:async';
import 'dart:convert';
import 'frb_generated.dart';
import 'frb_generated.io.dart'
    if (dart.library.js_interop) 'frb_generated.web.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

/// Main entrypoint of the Rust API
class RustLib extends BaseEntrypoint<RustLibApi, RustLibApiImpl, RustLibWire> {
  @internal
  static final instance = RustLib._();

  RustLib._();

  /// Initialize flutter_rust_bridge
  static Future<void> init({
    RustLibApi? api,
    BaseHandler? handler,
    ExternalLibrary? externalLibrary,
  }) async {
    await instance.initImpl(
      api: api,
      handler: handler,
      externalLibrary: externalLibrary,
    );
  }

  /// Initialize flutter_rust_bridge in mock mode.
  /// No libraries for FFI are loaded.
  static void initMock({required RustLibApi api}) {
    instance.initMockImpl(api: api);
  }

  /// Dispose flutter_rust_bridge
  ///
  /// The call to this function is optional, since flutter_rust_bridge (and everything else)
  /// is automatically disposed when the app stops.
  static void dispose() => instance.disposeImpl();

  @override
  ApiImplConstructor<RustLibApiImpl, RustLibWire> get apiImplConstructor =>
      RustLibApiImpl.new;

  @override
  WireConstructor<RustLibWire> get wireConstructor =>
      RustLibWire.fromExternalLibrary;

  @override
  Future<void> executeRustInitializers() async {
    await api.crateApiSimpleInitApp();
  }

  @override
  ExternalLibraryLoaderConfig get defaultExternalLibraryLoaderConfig =>
      kDefaultExternalLibraryLoaderConfig;

  @override
  String get codegenVersion => '2.10.0';

  @override
  int get rustContentHash => -36696261;

  static const kDefaultExternalLibraryLoaderConfig =
      ExternalLibraryLoaderConfig(
        stem: 'rust_lib_flutter_tube_cutter',
        ioDirectory: 'rust/target/release/',
        webPrefix: 'pkg/',
      );
}

abstract class RustLibApi extends BaseApi {
  double crateApiCutCutAutoAccessorGetCutAngle({required Cut that});

  double crateApiCutCutAutoAccessorGetCutFeedrate({required Cut that});

  Pos2D crateApiCutCutAutoAccessorGetEndPosition({required Cut that});

  double crateApiCutCutAutoAccessorGetPierceDelay({required Cut that});

  double crateApiCutCutAutoAccessorGetPierceDelay2({required Cut that});

  Pos2D crateApiCutCutAutoAccessorGetStartPosition({required Cut that});

  double crateApiCutCutAutoAccessorGetTubeWidth({required Cut that});

  void crateApiCutCutAutoAccessorSetCutAngle({
    required Cut that,
    required double cutAngle,
  });

  void crateApiCutCutAutoAccessorSetCutFeedrate({
    required Cut that,
    required double cutFeedrate,
  });

  void crateApiCutCutAutoAccessorSetEndPosition({
    required Cut that,
    required Pos2D endPosition,
  });

  void crateApiCutCutAutoAccessorSetPierceDelay({
    required Cut that,
    required double pierceDelay,
  });

  void crateApiCutCutAutoAccessorSetPierceDelay2({
    required Cut that,
    required double pierceDelay2,
  });

  void crateApiCutCutAutoAccessorSetStartPosition({
    required Cut that,
    required Pos2D startPosition,
  });

  void crateApiCutCutAutoAccessorSetTubeWidth({
    required Cut that,
    required double tubeWidth,
  });

  (double, double) crateApiCutCutGetEndPos({required Cut that});

  Cut crateApiCutCutNew();

  void crateApiCutCutSetCutAngle({required Cut that, required double newAngle});

  void crateApiCutCutSetCutFeedrate({
    required Cut that,
    required double newFeedrate,
  });

  void crateApiCutCutSetPierceDelay({
    required Cut that,
    required double newDelay,
  });

  void crateApiCutCutSetPierceDelay2({
    required Cut that,
    required double newDelay,
  });

  void crateApiCutCutSetTubeWidth({
    required Cut that,
    required double newWidth,
  });

  bool crateApiSettingsCutterSettingsAutoAccessorGetClearExistingGcode({
    required CutterSettings that,
  });

  CutMethod crateApiSettingsCutterSettingsAutoAccessorGetCutMethod({
    required CutterSettings that,
  });

  bool crateApiSettingsCutterSettingsAutoAccessorGetHomeAfterCut({
    required CutterSettings that,
  });

  double crateApiSettingsCutterSettingsAutoAccessorGetJogSpeed({
    required CutterSettings that,
  });

  double crateApiSettingsCutterSettingsAutoAccessorGetLaserOffsetX({
    required CutterSettings that,
  });

  double crateApiSettingsCutterSettingsAutoAccessorGetLaserOffsetY({
    required CutterSettings that,
  });

  bool crateApiSettingsCutterSettingsAutoAccessorGetUseLaser({
    required CutterSettings that,
  });

  void crateApiSettingsCutterSettingsAutoAccessorSetClearExistingGcode({
    required CutterSettings that,
    required bool clearExistingGcode,
  });

  void crateApiSettingsCutterSettingsAutoAccessorSetCutMethod({
    required CutterSettings that,
    required CutMethod cutMethod,
  });

  void crateApiSettingsCutterSettingsAutoAccessorSetHomeAfterCut({
    required CutterSettings that,
    required bool homeAfterCut,
  });

  void crateApiSettingsCutterSettingsAutoAccessorSetJogSpeed({
    required CutterSettings that,
    required double jogSpeed,
  });

  void crateApiSettingsCutterSettingsAutoAccessorSetLaserOffsetX({
    required CutterSettings that,
    required double laserOffsetX,
  });

  void crateApiSettingsCutterSettingsAutoAccessorSetLaserOffsetY({
    required CutterSettings that,
    required double laserOffsetY,
  });

  void crateApiSettingsCutterSettingsAutoAccessorSetUseLaser({
    required CutterSettings that,
    required bool useLaser,
  });

  CutterSettings crateApiSettingsCutterSettingsLoad();

  CutterSettings crateApiSettingsCutterSettingsNew();

  void crateApiSettingsCutterSettingsSave({required CutterSettings that});

  Future<void> crateApiGcodeGcodeAddCommand({
    required Gcode that,
    required String gCommand,
  });

  Future<void> crateApiGcodeGcodeAddCommandComment({
    required Gcode that,
    required String gCommand,
    required String gComment,
  });

  void crateApiGcodeGcodeAddCut({
    required Gcode that,
    required Cut tubeCut,
    required CutterSettings cutterSettings,
  });

  String crateApiGcodeGcodeAutoAccessorGetGcodeString({required Gcode that});

  void crateApiGcodeGcodeAutoAccessorSetGcodeString({
    required Gcode that,
    required String gcodeString,
  });

  Future<void> crateApiGcodeGcodeDwell({
    required Gcode that,
    required double dwellTime,
  });

  String crateApiGcodeGcodeGetGcodeString({required Gcode that});

  Future<void> crateApiGcodeGcodeHome2D({
    required Gcode that,
    required double feedrate,
  });

  Future<void> crateApiGcodeGcodeMoveXy({
    required Gcode that,
    required Pos2D newPos,
    required double feedrate,
  });

  Gcode crateApiGcodeGcodeNew();

  Future<void> crateApiGcodeGcodeSetPlasmaEnabled({
    required Gcode that,
    required bool enabled,
  });

  Future<void> crateApiGcodeGcodeSetPositioningMode({
    required Gcode that,
    required PositioningMode positioningMode,
  });

  Future<void> crateApiGcodeGcodeSetZero({required Gcode that});

  Future<void> crateApiGcodeGcodeWriteToFile({
    required Gcode that,
    required String filename,
  });

  void crateApiSenderMachineConnectionHome({
    required MachineConnection that,
    required CutterSettings cutterSettings,
  });

  Stream<MachinePosition> crateApiSenderMachineConnectionMakeConnection({
    required MachineConnection that,
  });

  MachineConnection crateApiSenderMachineConnectionNew();

  void crateApiSenderMachineConnectionSendGcodeCommand({
    required MachineConnection that,
    required String command,
  });

  void crateApiSenderMachineConnectionSendStringCommand({
    required MachineConnection that,
    required String command,
  });

  void crateApiSenderMachineConnectionSendStringCommandLowPriority({
    required MachineConnection that,
    required String command,
  });

  void crateApiSenderMachineConnectionSetSerialPort({
    required MachineConnection that,
    required String newPort,
  });

  MachineState crateApiStatusMachineStatusAutoAccessorGetMachineState({
    required MachineStatus that,
  });

  Pos2D crateApiStatusMachineStatusAutoAccessorGetPosition({
    required MachineStatus that,
  });

  void crateApiStatusMachineStatusAutoAccessorSetMachineState({
    required MachineStatus that,
    required MachineState machineState,
  });

  void crateApiStatusMachineStatusAutoAccessorSetPosition({
    required MachineStatus that,
    required Pos2D position,
  });

  Future<MachineStatus> crateApiStatusMachineStatusNew();

  double crateApiGcodePos2DAutoAccessorGetX({required Pos2D that});

  double crateApiGcodePos2DAutoAccessorGetY({required Pos2D that});

  void crateApiGcodePos2DAutoAccessorSetX({
    required Pos2D that,
    required double x,
  });

  void crateApiGcodePos2DAutoAccessorSetY({
    required Pos2D that,
    required double y,
  });

  Future<Pos2D> crateApiGcodePos2DNew({required double x, required double y});

  Future<Pos2D> crateApiGcodePos2DToScreenSpace({
    required Pos2D that,
    required double tubeWidth,
    required double scaleFactor,
  });

  Future<Pos2D> crateApiGcodeCalculateEndPos({
    required Pos2D startPos,
    required double tubeWidth,
    required double cutAngle,
    required double overshootAmount,
    required bool cutRight,
  });

  Future<Pos2D> crateApiGcodeGetMidpoint({
    required Pos2D startPos,
    required Pos2D endPos,
  });

  List<String> crateApiSimpleGetSerialPorts();

  String crateApiSimpleGreet({required String name});

  Future<void> crateApiSimpleInitApp();

  String crateApiGcodeJog({
    required double xDist,
    required double yDist,
    required CutterSettings cutterSettings,
  });

  MachinePosition crateApiSenderMachinePositionNew();

  Future<MachineStatus> crateApiStatusParseStatus({
    required String statusString,
  });

  Future<void> crateApiStatusRuleAllRules();

  RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_Cut;

  RustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_Cut;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_CutPtr;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_CutMethod;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_CutMethod;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_CutMethodPtr;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_CutterSettings;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_CutterSettings;

  CrossPlatformFinalizerArg
  get rust_arc_decrement_strong_count_CutterSettingsPtr;

  RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_Gcode;

  RustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_Gcode;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_GcodePtr;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_MachineConnection;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_MachineConnection;

  CrossPlatformFinalizerArg
  get rust_arc_decrement_strong_count_MachineConnectionPtr;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_MachineStatus;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_MachineStatus;

  CrossPlatformFinalizerArg
  get rust_arc_decrement_strong_count_MachineStatusPtr;

  RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_Pos2D;

  RustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_Pos2D;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_Pos2DPtr;
}

class RustLibApiImpl extends RustLibApiImplPlatform implements RustLibApi {
  RustLibApiImpl({
    required super.handler,
    required super.wire,
    required super.generalizedFrbRustBinding,
    required super.portManager,
  });

  @override
  double crateApiCutCutAutoAccessorGetCutAngle({required Cut that}) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCut(
            that,
            serializer,
          );
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 1)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_f_32,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiCutCutAutoAccessorGetCutAngleConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiCutCutAutoAccessorGetCutAngleConstMeta =>
      const TaskConstMeta(
        debugName: "Cut_auto_accessor_get_cut_angle",
        argNames: ["that"],
      );

  @override
  double crateApiCutCutAutoAccessorGetCutFeedrate({required Cut that}) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCut(
            that,
            serializer,
          );
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 2)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_f_32,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiCutCutAutoAccessorGetCutFeedrateConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiCutCutAutoAccessorGetCutFeedrateConstMeta =>
      const TaskConstMeta(
        debugName: "Cut_auto_accessor_get_cut_feedrate",
        argNames: ["that"],
      );

  @override
  Pos2D crateApiCutCutAutoAccessorGetEndPosition({required Cut that}) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCut(
            that,
            serializer,
          );
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 3)!;
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPos2D,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiCutCutAutoAccessorGetEndPositionConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiCutCutAutoAccessorGetEndPositionConstMeta =>
      const TaskConstMeta(
        debugName: "Cut_auto_accessor_get_end_position",
        argNames: ["that"],
      );

  @override
  double crateApiCutCutAutoAccessorGetPierceDelay({required Cut that}) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCut(
            that,
            serializer,
          );
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 4)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_f_32,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiCutCutAutoAccessorGetPierceDelayConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiCutCutAutoAccessorGetPierceDelayConstMeta =>
      const TaskConstMeta(
        debugName: "Cut_auto_accessor_get_pierce_delay",
        argNames: ["that"],
      );

  @override
  double crateApiCutCutAutoAccessorGetPierceDelay2({required Cut that}) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCut(
            that,
            serializer,
          );
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 5)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_f_32,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiCutCutAutoAccessorGetPierceDelay2ConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiCutCutAutoAccessorGetPierceDelay2ConstMeta =>
      const TaskConstMeta(
        debugName: "Cut_auto_accessor_get_pierce_delay_2",
        argNames: ["that"],
      );

  @override
  Pos2D crateApiCutCutAutoAccessorGetStartPosition({required Cut that}) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCut(
            that,
            serializer,
          );
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 6)!;
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPos2D,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiCutCutAutoAccessorGetStartPositionConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiCutCutAutoAccessorGetStartPositionConstMeta =>
      const TaskConstMeta(
        debugName: "Cut_auto_accessor_get_start_position",
        argNames: ["that"],
      );

  @override
  double crateApiCutCutAutoAccessorGetTubeWidth({required Cut that}) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCut(
            that,
            serializer,
          );
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 7)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_f_32,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiCutCutAutoAccessorGetTubeWidthConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiCutCutAutoAccessorGetTubeWidthConstMeta =>
      const TaskConstMeta(
        debugName: "Cut_auto_accessor_get_tube_width",
        argNames: ["that"],
      );

  @override
  void crateApiCutCutAutoAccessorSetCutAngle({
    required Cut that,
    required double cutAngle,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCut(
            that,
            serializer,
          );
          sse_encode_f_32(cutAngle, serializer);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 8)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiCutCutAutoAccessorSetCutAngleConstMeta,
        argValues: [that, cutAngle],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiCutCutAutoAccessorSetCutAngleConstMeta =>
      const TaskConstMeta(
        debugName: "Cut_auto_accessor_set_cut_angle",
        argNames: ["that", "cutAngle"],
      );

  @override
  void crateApiCutCutAutoAccessorSetCutFeedrate({
    required Cut that,
    required double cutFeedrate,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCut(
            that,
            serializer,
          );
          sse_encode_f_32(cutFeedrate, serializer);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 9)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiCutCutAutoAccessorSetCutFeedrateConstMeta,
        argValues: [that, cutFeedrate],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiCutCutAutoAccessorSetCutFeedrateConstMeta =>
      const TaskConstMeta(
        debugName: "Cut_auto_accessor_set_cut_feedrate",
        argNames: ["that", "cutFeedrate"],
      );

  @override
  void crateApiCutCutAutoAccessorSetEndPosition({
    required Cut that,
    required Pos2D endPosition,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCut(
            that,
            serializer,
          );
          sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPos2D(
            endPosition,
            serializer,
          );
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 10)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiCutCutAutoAccessorSetEndPositionConstMeta,
        argValues: [that, endPosition],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiCutCutAutoAccessorSetEndPositionConstMeta =>
      const TaskConstMeta(
        debugName: "Cut_auto_accessor_set_end_position",
        argNames: ["that", "endPosition"],
      );

  @override
  void crateApiCutCutAutoAccessorSetPierceDelay({
    required Cut that,
    required double pierceDelay,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCut(
            that,
            serializer,
          );
          sse_encode_f_32(pierceDelay, serializer);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 11)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiCutCutAutoAccessorSetPierceDelayConstMeta,
        argValues: [that, pierceDelay],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiCutCutAutoAccessorSetPierceDelayConstMeta =>
      const TaskConstMeta(
        debugName: "Cut_auto_accessor_set_pierce_delay",
        argNames: ["that", "pierceDelay"],
      );

  @override
  void crateApiCutCutAutoAccessorSetPierceDelay2({
    required Cut that,
    required double pierceDelay2,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCut(
            that,
            serializer,
          );
          sse_encode_f_32(pierceDelay2, serializer);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 12)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiCutCutAutoAccessorSetPierceDelay2ConstMeta,
        argValues: [that, pierceDelay2],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiCutCutAutoAccessorSetPierceDelay2ConstMeta =>
      const TaskConstMeta(
        debugName: "Cut_auto_accessor_set_pierce_delay_2",
        argNames: ["that", "pierceDelay2"],
      );

  @override
  void crateApiCutCutAutoAccessorSetStartPosition({
    required Cut that,
    required Pos2D startPosition,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCut(
            that,
            serializer,
          );
          sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPos2D(
            startPosition,
            serializer,
          );
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 13)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiCutCutAutoAccessorSetStartPositionConstMeta,
        argValues: [that, startPosition],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiCutCutAutoAccessorSetStartPositionConstMeta =>
      const TaskConstMeta(
        debugName: "Cut_auto_accessor_set_start_position",
        argNames: ["that", "startPosition"],
      );

  @override
  void crateApiCutCutAutoAccessorSetTubeWidth({
    required Cut that,
    required double tubeWidth,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCut(
            that,
            serializer,
          );
          sse_encode_f_32(tubeWidth, serializer);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 14)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiCutCutAutoAccessorSetTubeWidthConstMeta,
        argValues: [that, tubeWidth],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiCutCutAutoAccessorSetTubeWidthConstMeta =>
      const TaskConstMeta(
        debugName: "Cut_auto_accessor_set_tube_width",
        argNames: ["that", "tubeWidth"],
      );

  @override
  (double, double) crateApiCutCutGetEndPos({required Cut that}) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCut(
            that,
            serializer,
          );
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 15)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_record_f_32_f_32,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiCutCutGetEndPosConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiCutCutGetEndPosConstMeta =>
      const TaskConstMeta(debugName: "Cut_get_end_pos", argNames: ["that"]);

  @override
  Cut crateApiCutCutNew() {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 16)!;
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCut,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiCutCutNewConstMeta,
        argValues: [],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiCutCutNewConstMeta =>
      const TaskConstMeta(debugName: "Cut_new", argNames: []);

  @override
  void crateApiCutCutSetCutAngle({
    required Cut that,
    required double newAngle,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCut(
            that,
            serializer,
          );
          sse_encode_f_32(newAngle, serializer);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 17)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiCutCutSetCutAngleConstMeta,
        argValues: [that, newAngle],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiCutCutSetCutAngleConstMeta => const TaskConstMeta(
    debugName: "Cut_set_cut_angle",
    argNames: ["that", "newAngle"],
  );

  @override
  void crateApiCutCutSetCutFeedrate({
    required Cut that,
    required double newFeedrate,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCut(
            that,
            serializer,
          );
          sse_encode_f_32(newFeedrate, serializer);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 18)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiCutCutSetCutFeedrateConstMeta,
        argValues: [that, newFeedrate],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiCutCutSetCutFeedrateConstMeta =>
      const TaskConstMeta(
        debugName: "Cut_set_cut_feedrate",
        argNames: ["that", "newFeedrate"],
      );

  @override
  void crateApiCutCutSetPierceDelay({
    required Cut that,
    required double newDelay,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCut(
            that,
            serializer,
          );
          sse_encode_f_32(newDelay, serializer);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 19)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiCutCutSetPierceDelayConstMeta,
        argValues: [that, newDelay],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiCutCutSetPierceDelayConstMeta =>
      const TaskConstMeta(
        debugName: "Cut_set_pierce_delay",
        argNames: ["that", "newDelay"],
      );

  @override
  void crateApiCutCutSetPierceDelay2({
    required Cut that,
    required double newDelay,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCut(
            that,
            serializer,
          );
          sse_encode_f_32(newDelay, serializer);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 20)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiCutCutSetPierceDelay2ConstMeta,
        argValues: [that, newDelay],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiCutCutSetPierceDelay2ConstMeta =>
      const TaskConstMeta(
        debugName: "Cut_set_pierce_delay_2",
        argNames: ["that", "newDelay"],
      );

  @override
  void crateApiCutCutSetTubeWidth({
    required Cut that,
    required double newWidth,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCut(
            that,
            serializer,
          );
          sse_encode_f_32(newWidth, serializer);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 21)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiCutCutSetTubeWidthConstMeta,
        argValues: [that, newWidth],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiCutCutSetTubeWidthConstMeta => const TaskConstMeta(
    debugName: "Cut_set_tube_width",
    argNames: ["that", "newWidth"],
  );

  @override
  bool crateApiSettingsCutterSettingsAutoAccessorGetClearExistingGcode({
    required CutterSettings that,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCutterSettings(
            that,
            serializer,
          );
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 22)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_bool,
          decodeErrorData: null,
        ),
        constMeta:
            kCrateApiSettingsCutterSettingsAutoAccessorGetClearExistingGcodeConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateApiSettingsCutterSettingsAutoAccessorGetClearExistingGcodeConstMeta =>
      const TaskConstMeta(
        debugName: "CutterSettings_auto_accessor_get_clear_existing_gcode",
        argNames: ["that"],
      );

  @override
  CutMethod crateApiSettingsCutterSettingsAutoAccessorGetCutMethod({
    required CutterSettings that,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCutterSettings(
            that,
            serializer,
          );
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 23)!;
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCutMethod,
          decodeErrorData: null,
        ),
        constMeta:
            kCrateApiSettingsCutterSettingsAutoAccessorGetCutMethodConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateApiSettingsCutterSettingsAutoAccessorGetCutMethodConstMeta =>
      const TaskConstMeta(
        debugName: "CutterSettings_auto_accessor_get_cut_method",
        argNames: ["that"],
      );

  @override
  bool crateApiSettingsCutterSettingsAutoAccessorGetHomeAfterCut({
    required CutterSettings that,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCutterSettings(
            that,
            serializer,
          );
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 24)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_bool,
          decodeErrorData: null,
        ),
        constMeta:
            kCrateApiSettingsCutterSettingsAutoAccessorGetHomeAfterCutConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateApiSettingsCutterSettingsAutoAccessorGetHomeAfterCutConstMeta =>
      const TaskConstMeta(
        debugName: "CutterSettings_auto_accessor_get_home_after_cut",
        argNames: ["that"],
      );

  @override
  double crateApiSettingsCutterSettingsAutoAccessorGetJogSpeed({
    required CutterSettings that,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCutterSettings(
            that,
            serializer,
          );
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 25)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_f_32,
          decodeErrorData: null,
        ),
        constMeta:
            kCrateApiSettingsCutterSettingsAutoAccessorGetJogSpeedConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateApiSettingsCutterSettingsAutoAccessorGetJogSpeedConstMeta =>
      const TaskConstMeta(
        debugName: "CutterSettings_auto_accessor_get_jog_speed",
        argNames: ["that"],
      );

  @override
  double crateApiSettingsCutterSettingsAutoAccessorGetLaserOffsetX({
    required CutterSettings that,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCutterSettings(
            that,
            serializer,
          );
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 26)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_f_32,
          decodeErrorData: null,
        ),
        constMeta:
            kCrateApiSettingsCutterSettingsAutoAccessorGetLaserOffsetXConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateApiSettingsCutterSettingsAutoAccessorGetLaserOffsetXConstMeta =>
      const TaskConstMeta(
        debugName: "CutterSettings_auto_accessor_get_laser_offset_x",
        argNames: ["that"],
      );

  @override
  double crateApiSettingsCutterSettingsAutoAccessorGetLaserOffsetY({
    required CutterSettings that,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCutterSettings(
            that,
            serializer,
          );
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 27)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_f_32,
          decodeErrorData: null,
        ),
        constMeta:
            kCrateApiSettingsCutterSettingsAutoAccessorGetLaserOffsetYConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateApiSettingsCutterSettingsAutoAccessorGetLaserOffsetYConstMeta =>
      const TaskConstMeta(
        debugName: "CutterSettings_auto_accessor_get_laser_offset_y",
        argNames: ["that"],
      );

  @override
  bool crateApiSettingsCutterSettingsAutoAccessorGetUseLaser({
    required CutterSettings that,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCutterSettings(
            that,
            serializer,
          );
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 28)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_bool,
          decodeErrorData: null,
        ),
        constMeta:
            kCrateApiSettingsCutterSettingsAutoAccessorGetUseLaserConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateApiSettingsCutterSettingsAutoAccessorGetUseLaserConstMeta =>
      const TaskConstMeta(
        debugName: "CutterSettings_auto_accessor_get_use_laser",
        argNames: ["that"],
      );

  @override
  void crateApiSettingsCutterSettingsAutoAccessorSetClearExistingGcode({
    required CutterSettings that,
    required bool clearExistingGcode,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCutterSettings(
            that,
            serializer,
          );
          sse_encode_bool(clearExistingGcode, serializer);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 29)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: null,
        ),
        constMeta:
            kCrateApiSettingsCutterSettingsAutoAccessorSetClearExistingGcodeConstMeta,
        argValues: [that, clearExistingGcode],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateApiSettingsCutterSettingsAutoAccessorSetClearExistingGcodeConstMeta =>
      const TaskConstMeta(
        debugName: "CutterSettings_auto_accessor_set_clear_existing_gcode",
        argNames: ["that", "clearExistingGcode"],
      );

  @override
  void crateApiSettingsCutterSettingsAutoAccessorSetCutMethod({
    required CutterSettings that,
    required CutMethod cutMethod,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCutterSettings(
            that,
            serializer,
          );
          sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCutMethod(
            cutMethod,
            serializer,
          );
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 30)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: null,
        ),
        constMeta:
            kCrateApiSettingsCutterSettingsAutoAccessorSetCutMethodConstMeta,
        argValues: [that, cutMethod],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateApiSettingsCutterSettingsAutoAccessorSetCutMethodConstMeta =>
      const TaskConstMeta(
        debugName: "CutterSettings_auto_accessor_set_cut_method",
        argNames: ["that", "cutMethod"],
      );

  @override
  void crateApiSettingsCutterSettingsAutoAccessorSetHomeAfterCut({
    required CutterSettings that,
    required bool homeAfterCut,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCutterSettings(
            that,
            serializer,
          );
          sse_encode_bool(homeAfterCut, serializer);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 31)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: null,
        ),
        constMeta:
            kCrateApiSettingsCutterSettingsAutoAccessorSetHomeAfterCutConstMeta,
        argValues: [that, homeAfterCut],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateApiSettingsCutterSettingsAutoAccessorSetHomeAfterCutConstMeta =>
      const TaskConstMeta(
        debugName: "CutterSettings_auto_accessor_set_home_after_cut",
        argNames: ["that", "homeAfterCut"],
      );

  @override
  void crateApiSettingsCutterSettingsAutoAccessorSetJogSpeed({
    required CutterSettings that,
    required double jogSpeed,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCutterSettings(
            that,
            serializer,
          );
          sse_encode_f_32(jogSpeed, serializer);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 32)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: null,
        ),
        constMeta:
            kCrateApiSettingsCutterSettingsAutoAccessorSetJogSpeedConstMeta,
        argValues: [that, jogSpeed],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateApiSettingsCutterSettingsAutoAccessorSetJogSpeedConstMeta =>
      const TaskConstMeta(
        debugName: "CutterSettings_auto_accessor_set_jog_speed",
        argNames: ["that", "jogSpeed"],
      );

  @override
  void crateApiSettingsCutterSettingsAutoAccessorSetLaserOffsetX({
    required CutterSettings that,
    required double laserOffsetX,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCutterSettings(
            that,
            serializer,
          );
          sse_encode_f_32(laserOffsetX, serializer);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 33)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: null,
        ),
        constMeta:
            kCrateApiSettingsCutterSettingsAutoAccessorSetLaserOffsetXConstMeta,
        argValues: [that, laserOffsetX],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateApiSettingsCutterSettingsAutoAccessorSetLaserOffsetXConstMeta =>
      const TaskConstMeta(
        debugName: "CutterSettings_auto_accessor_set_laser_offset_x",
        argNames: ["that", "laserOffsetX"],
      );

  @override
  void crateApiSettingsCutterSettingsAutoAccessorSetLaserOffsetY({
    required CutterSettings that,
    required double laserOffsetY,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCutterSettings(
            that,
            serializer,
          );
          sse_encode_f_32(laserOffsetY, serializer);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 34)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: null,
        ),
        constMeta:
            kCrateApiSettingsCutterSettingsAutoAccessorSetLaserOffsetYConstMeta,
        argValues: [that, laserOffsetY],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateApiSettingsCutterSettingsAutoAccessorSetLaserOffsetYConstMeta =>
      const TaskConstMeta(
        debugName: "CutterSettings_auto_accessor_set_laser_offset_y",
        argNames: ["that", "laserOffsetY"],
      );

  @override
  void crateApiSettingsCutterSettingsAutoAccessorSetUseLaser({
    required CutterSettings that,
    required bool useLaser,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCutterSettings(
            that,
            serializer,
          );
          sse_encode_bool(useLaser, serializer);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 35)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: null,
        ),
        constMeta:
            kCrateApiSettingsCutterSettingsAutoAccessorSetUseLaserConstMeta,
        argValues: [that, useLaser],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateApiSettingsCutterSettingsAutoAccessorSetUseLaserConstMeta =>
      const TaskConstMeta(
        debugName: "CutterSettings_auto_accessor_set_use_laser",
        argNames: ["that", "useLaser"],
      );

  @override
  CutterSettings crateApiSettingsCutterSettingsLoad() {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 36)!;
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCutterSettings,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiSettingsCutterSettingsLoadConstMeta,
        argValues: [],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiSettingsCutterSettingsLoadConstMeta =>
      const TaskConstMeta(debugName: "CutterSettings_load", argNames: []);

  @override
  CutterSettings crateApiSettingsCutterSettingsNew() {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 37)!;
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCutterSettings,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiSettingsCutterSettingsNewConstMeta,
        argValues: [],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiSettingsCutterSettingsNewConstMeta =>
      const TaskConstMeta(debugName: "CutterSettings_new", argNames: []);

  @override
  void crateApiSettingsCutterSettingsSave({required CutterSettings that}) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCutterSettings(
            that,
            serializer,
          );
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 38)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiSettingsCutterSettingsSaveConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiSettingsCutterSettingsSaveConstMeta =>
      const TaskConstMeta(debugName: "CutterSettings_save", argNames: ["that"]);

  @override
  Future<void> crateApiGcodeGcodeAddCommand({
    required Gcode that,
    required String gCommand,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerGcode(
            that,
            serializer,
          );
          sse_encode_String(gCommand, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 39,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiGcodeGcodeAddCommandConstMeta,
        argValues: [that, gCommand],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiGcodeGcodeAddCommandConstMeta =>
      const TaskConstMeta(
        debugName: "Gcode_add_command",
        argNames: ["that", "gCommand"],
      );

  @override
  Future<void> crateApiGcodeGcodeAddCommandComment({
    required Gcode that,
    required String gCommand,
    required String gComment,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerGcode(
            that,
            serializer,
          );
          sse_encode_String(gCommand, serializer);
          sse_encode_String(gComment, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 40,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiGcodeGcodeAddCommandCommentConstMeta,
        argValues: [that, gCommand, gComment],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiGcodeGcodeAddCommandCommentConstMeta =>
      const TaskConstMeta(
        debugName: "Gcode_add_command_comment",
        argNames: ["that", "gCommand", "gComment"],
      );

  @override
  void crateApiGcodeGcodeAddCut({
    required Gcode that,
    required Cut tubeCut,
    required CutterSettings cutterSettings,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerGcode(
            that,
            serializer,
          );
          sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCut(
            tubeCut,
            serializer,
          );
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCutterSettings(
            cutterSettings,
            serializer,
          );
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 41)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiGcodeGcodeAddCutConstMeta,
        argValues: [that, tubeCut, cutterSettings],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiGcodeGcodeAddCutConstMeta => const TaskConstMeta(
    debugName: "Gcode_add_cut",
    argNames: ["that", "tubeCut", "cutterSettings"],
  );

  @override
  String crateApiGcodeGcodeAutoAccessorGetGcodeString({required Gcode that}) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerGcode(
            that,
            serializer,
          );
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 42)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_String,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiGcodeGcodeAutoAccessorGetGcodeStringConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiGcodeGcodeAutoAccessorGetGcodeStringConstMeta =>
      const TaskConstMeta(
        debugName: "Gcode_auto_accessor_get_gcode_string",
        argNames: ["that"],
      );

  @override
  void crateApiGcodeGcodeAutoAccessorSetGcodeString({
    required Gcode that,
    required String gcodeString,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerGcode(
            that,
            serializer,
          );
          sse_encode_String(gcodeString, serializer);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 43)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiGcodeGcodeAutoAccessorSetGcodeStringConstMeta,
        argValues: [that, gcodeString],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiGcodeGcodeAutoAccessorSetGcodeStringConstMeta =>
      const TaskConstMeta(
        debugName: "Gcode_auto_accessor_set_gcode_string",
        argNames: ["that", "gcodeString"],
      );

  @override
  Future<void> crateApiGcodeGcodeDwell({
    required Gcode that,
    required double dwellTime,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerGcode(
            that,
            serializer,
          );
          sse_encode_f_32(dwellTime, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 44,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiGcodeGcodeDwellConstMeta,
        argValues: [that, dwellTime],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiGcodeGcodeDwellConstMeta => const TaskConstMeta(
    debugName: "Gcode_dwell",
    argNames: ["that", "dwellTime"],
  );

  @override
  String crateApiGcodeGcodeGetGcodeString({required Gcode that}) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerGcode(
            that,
            serializer,
          );
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 45)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_String,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiGcodeGcodeGetGcodeStringConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiGcodeGcodeGetGcodeStringConstMeta =>
      const TaskConstMeta(
        debugName: "Gcode_get_gcode_string",
        argNames: ["that"],
      );

  @override
  Future<void> crateApiGcodeGcodeHome2D({
    required Gcode that,
    required double feedrate,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerGcode(
            that,
            serializer,
          );
          sse_encode_f_32(feedrate, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 46,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiGcodeGcodeHome2DConstMeta,
        argValues: [that, feedrate],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiGcodeGcodeHome2DConstMeta => const TaskConstMeta(
    debugName: "Gcode_home2D",
    argNames: ["that", "feedrate"],
  );

  @override
  Future<void> crateApiGcodeGcodeMoveXy({
    required Gcode that,
    required Pos2D newPos,
    required double feedrate,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerGcode(
            that,
            serializer,
          );
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPos2D(
            newPos,
            serializer,
          );
          sse_encode_f_32(feedrate, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 47,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiGcodeGcodeMoveXyConstMeta,
        argValues: [that, newPos, feedrate],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiGcodeGcodeMoveXyConstMeta => const TaskConstMeta(
    debugName: "Gcode_move_xy",
    argNames: ["that", "newPos", "feedrate"],
  );

  @override
  Gcode crateApiGcodeGcodeNew() {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 48)!;
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerGcode,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiGcodeGcodeNewConstMeta,
        argValues: [],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiGcodeGcodeNewConstMeta =>
      const TaskConstMeta(debugName: "Gcode_new", argNames: []);

  @override
  Future<void> crateApiGcodeGcodeSetPlasmaEnabled({
    required Gcode that,
    required bool enabled,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerGcode(
            that,
            serializer,
          );
          sse_encode_bool(enabled, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 49,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiGcodeGcodeSetPlasmaEnabledConstMeta,
        argValues: [that, enabled],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiGcodeGcodeSetPlasmaEnabledConstMeta =>
      const TaskConstMeta(
        debugName: "Gcode_set_plasma_enabled",
        argNames: ["that", "enabled"],
      );

  @override
  Future<void> crateApiGcodeGcodeSetPositioningMode({
    required Gcode that,
    required PositioningMode positioningMode,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerGcode(
            that,
            serializer,
          );
          sse_encode_positioning_mode(positioningMode, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 50,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiGcodeGcodeSetPositioningModeConstMeta,
        argValues: [that, positioningMode],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiGcodeGcodeSetPositioningModeConstMeta =>
      const TaskConstMeta(
        debugName: "Gcode_set_positioning_mode",
        argNames: ["that", "positioningMode"],
      );

  @override
  Future<void> crateApiGcodeGcodeSetZero({required Gcode that}) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerGcode(
            that,
            serializer,
          );
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 51,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiGcodeGcodeSetZeroConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiGcodeGcodeSetZeroConstMeta =>
      const TaskConstMeta(debugName: "Gcode_set_zero", argNames: ["that"]);

  @override
  Future<void> crateApiGcodeGcodeWriteToFile({
    required Gcode that,
    required String filename,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerGcode(
            that,
            serializer,
          );
          sse_encode_String(filename, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 52,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiGcodeGcodeWriteToFileConstMeta,
        argValues: [that, filename],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiGcodeGcodeWriteToFileConstMeta =>
      const TaskConstMeta(
        debugName: "Gcode_write_to_file",
        argNames: ["that", "filename"],
      );

  @override
  void crateApiSenderMachineConnectionHome({
    required MachineConnection that,
    required CutterSettings cutterSettings,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMachineConnection(
            that,
            serializer,
          );
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCutterSettings(
            cutterSettings,
            serializer,
          );
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 53)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiSenderMachineConnectionHomeConstMeta,
        argValues: [that, cutterSettings],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiSenderMachineConnectionHomeConstMeta =>
      const TaskConstMeta(
        debugName: "MachineConnection_home",
        argNames: ["that", "cutterSettings"],
      );

  @override
  Stream<MachinePosition> crateApiSenderMachineConnectionMakeConnection({
    required MachineConnection that,
  }) {
    final sink = RustStreamSink<MachinePosition>();
    handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMachineConnection(
            that,
            serializer,
          );
          sse_encode_StreamSink_machine_position_Sse(sink, serializer);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 54)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiSenderMachineConnectionMakeConnectionConstMeta,
        argValues: [that, sink],
        apiImpl: this,
      ),
    );
    return sink.stream;
  }

  TaskConstMeta get kCrateApiSenderMachineConnectionMakeConnectionConstMeta =>
      const TaskConstMeta(
        debugName: "MachineConnection_make_connection",
        argNames: ["that", "sink"],
      );

  @override
  MachineConnection crateApiSenderMachineConnectionNew() {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 55)!;
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMachineConnection,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiSenderMachineConnectionNewConstMeta,
        argValues: [],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiSenderMachineConnectionNewConstMeta =>
      const TaskConstMeta(debugName: "MachineConnection_new", argNames: []);

  @override
  void crateApiSenderMachineConnectionSendGcodeCommand({
    required MachineConnection that,
    required String command,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMachineConnection(
            that,
            serializer,
          );
          sse_encode_String(command, serializer);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 56)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiSenderMachineConnectionSendGcodeCommandConstMeta,
        argValues: [that, command],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiSenderMachineConnectionSendGcodeCommandConstMeta =>
      const TaskConstMeta(
        debugName: "MachineConnection_send_gcode_command",
        argNames: ["that", "command"],
      );

  @override
  void crateApiSenderMachineConnectionSendStringCommand({
    required MachineConnection that,
    required String command,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMachineConnection(
            that,
            serializer,
          );
          sse_encode_String(command, serializer);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 57)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiSenderMachineConnectionSendStringCommandConstMeta,
        argValues: [that, command],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateApiSenderMachineConnectionSendStringCommandConstMeta =>
      const TaskConstMeta(
        debugName: "MachineConnection_send_string_command",
        argNames: ["that", "command"],
      );

  @override
  void crateApiSenderMachineConnectionSendStringCommandLowPriority({
    required MachineConnection that,
    required String command,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMachineConnection(
            that,
            serializer,
          );
          sse_encode_String(command, serializer);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 58)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: null,
        ),
        constMeta:
            kCrateApiSenderMachineConnectionSendStringCommandLowPriorityConstMeta,
        argValues: [that, command],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateApiSenderMachineConnectionSendStringCommandLowPriorityConstMeta =>
      const TaskConstMeta(
        debugName: "MachineConnection_send_string_command_low_priority",
        argNames: ["that", "command"],
      );

  @override
  void crateApiSenderMachineConnectionSetSerialPort({
    required MachineConnection that,
    required String newPort,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMachineConnection(
            that,
            serializer,
          );
          sse_encode_String(newPort, serializer);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 59)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiSenderMachineConnectionSetSerialPortConstMeta,
        argValues: [that, newPort],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiSenderMachineConnectionSetSerialPortConstMeta =>
      const TaskConstMeta(
        debugName: "MachineConnection_set_serial_port",
        argNames: ["that", "newPort"],
      );

  @override
  MachineState crateApiStatusMachineStatusAutoAccessorGetMachineState({
    required MachineStatus that,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMachineStatus(
            that,
            serializer,
          );
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 60)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_machine_state,
          decodeErrorData: null,
        ),
        constMeta:
            kCrateApiStatusMachineStatusAutoAccessorGetMachineStateConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateApiStatusMachineStatusAutoAccessorGetMachineStateConstMeta =>
      const TaskConstMeta(
        debugName: "MachineStatus_auto_accessor_get_machine_state",
        argNames: ["that"],
      );

  @override
  Pos2D crateApiStatusMachineStatusAutoAccessorGetPosition({
    required MachineStatus that,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMachineStatus(
            that,
            serializer,
          );
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 61)!;
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPos2D,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiStatusMachineStatusAutoAccessorGetPositionConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateApiStatusMachineStatusAutoAccessorGetPositionConstMeta =>
      const TaskConstMeta(
        debugName: "MachineStatus_auto_accessor_get_position",
        argNames: ["that"],
      );

  @override
  void crateApiStatusMachineStatusAutoAccessorSetMachineState({
    required MachineStatus that,
    required MachineState machineState,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMachineStatus(
            that,
            serializer,
          );
          sse_encode_machine_state(machineState, serializer);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 62)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: null,
        ),
        constMeta:
            kCrateApiStatusMachineStatusAutoAccessorSetMachineStateConstMeta,
        argValues: [that, machineState],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateApiStatusMachineStatusAutoAccessorSetMachineStateConstMeta =>
      const TaskConstMeta(
        debugName: "MachineStatus_auto_accessor_set_machine_state",
        argNames: ["that", "machineState"],
      );

  @override
  void crateApiStatusMachineStatusAutoAccessorSetPosition({
    required MachineStatus that,
    required Pos2D position,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMachineStatus(
            that,
            serializer,
          );
          sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPos2D(
            position,
            serializer,
          );
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 63)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiStatusMachineStatusAutoAccessorSetPositionConstMeta,
        argValues: [that, position],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateApiStatusMachineStatusAutoAccessorSetPositionConstMeta =>
      const TaskConstMeta(
        debugName: "MachineStatus_auto_accessor_set_position",
        argNames: ["that", "position"],
      );

  @override
  Future<MachineStatus> crateApiStatusMachineStatusNew() {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 64,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMachineStatus,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiStatusMachineStatusNewConstMeta,
        argValues: [],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiStatusMachineStatusNewConstMeta =>
      const TaskConstMeta(debugName: "MachineStatus_new", argNames: []);

  @override
  double crateApiGcodePos2DAutoAccessorGetX({required Pos2D that}) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPos2D(
            that,
            serializer,
          );
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 65)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_f_32,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiGcodePos2DAutoAccessorGetXConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiGcodePos2DAutoAccessorGetXConstMeta =>
      const TaskConstMeta(
        debugName: "Pos2D_auto_accessor_get_x",
        argNames: ["that"],
      );

  @override
  double crateApiGcodePos2DAutoAccessorGetY({required Pos2D that}) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPos2D(
            that,
            serializer,
          );
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 66)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_f_32,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiGcodePos2DAutoAccessorGetYConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiGcodePos2DAutoAccessorGetYConstMeta =>
      const TaskConstMeta(
        debugName: "Pos2D_auto_accessor_get_y",
        argNames: ["that"],
      );

  @override
  void crateApiGcodePos2DAutoAccessorSetX({
    required Pos2D that,
    required double x,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPos2D(
            that,
            serializer,
          );
          sse_encode_f_32(x, serializer);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 67)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiGcodePos2DAutoAccessorSetXConstMeta,
        argValues: [that, x],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiGcodePos2DAutoAccessorSetXConstMeta =>
      const TaskConstMeta(
        debugName: "Pos2D_auto_accessor_set_x",
        argNames: ["that", "x"],
      );

  @override
  void crateApiGcodePos2DAutoAccessorSetY({
    required Pos2D that,
    required double y,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPos2D(
            that,
            serializer,
          );
          sse_encode_f_32(y, serializer);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 68)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiGcodePos2DAutoAccessorSetYConstMeta,
        argValues: [that, y],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiGcodePos2DAutoAccessorSetYConstMeta =>
      const TaskConstMeta(
        debugName: "Pos2D_auto_accessor_set_y",
        argNames: ["that", "y"],
      );

  @override
  Future<Pos2D> crateApiGcodePos2DNew({required double x, required double y}) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_f_32(x, serializer);
          sse_encode_f_32(y, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 69,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPos2D,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiGcodePos2DNewConstMeta,
        argValues: [x, y],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiGcodePos2DNewConstMeta =>
      const TaskConstMeta(debugName: "Pos2D_new", argNames: ["x", "y"]);

  @override
  Future<Pos2D> crateApiGcodePos2DToScreenSpace({
    required Pos2D that,
    required double tubeWidth,
    required double scaleFactor,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPos2D(
            that,
            serializer,
          );
          sse_encode_f_32(tubeWidth, serializer);
          sse_encode_f_32(scaleFactor, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 70,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPos2D,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiGcodePos2DToScreenSpaceConstMeta,
        argValues: [that, tubeWidth, scaleFactor],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiGcodePos2DToScreenSpaceConstMeta =>
      const TaskConstMeta(
        debugName: "Pos2D_to_screen_space",
        argNames: ["that", "tubeWidth", "scaleFactor"],
      );

  @override
  Future<Pos2D> crateApiGcodeCalculateEndPos({
    required Pos2D startPos,
    required double tubeWidth,
    required double cutAngle,
    required double overshootAmount,
    required bool cutRight,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPos2D(
            startPos,
            serializer,
          );
          sse_encode_f_32(tubeWidth, serializer);
          sse_encode_f_32(cutAngle, serializer);
          sse_encode_f_32(overshootAmount, serializer);
          sse_encode_bool(cutRight, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 71,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPos2D,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiGcodeCalculateEndPosConstMeta,
        argValues: [startPos, tubeWidth, cutAngle, overshootAmount, cutRight],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiGcodeCalculateEndPosConstMeta =>
      const TaskConstMeta(
        debugName: "calculate_end_pos",
        argNames: [
          "startPos",
          "tubeWidth",
          "cutAngle",
          "overshootAmount",
          "cutRight",
        ],
      );

  @override
  Future<Pos2D> crateApiGcodeGetMidpoint({
    required Pos2D startPos,
    required Pos2D endPos,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPos2D(
            startPos,
            serializer,
          );
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPos2D(
            endPos,
            serializer,
          );
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 72,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPos2D,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiGcodeGetMidpointConstMeta,
        argValues: [startPos, endPos],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiGcodeGetMidpointConstMeta => const TaskConstMeta(
    debugName: "get_midpoint",
    argNames: ["startPos", "endPos"],
  );

  @override
  List<String> crateApiSimpleGetSerialPorts() {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 73)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_list_String,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiSimpleGetSerialPortsConstMeta,
        argValues: [],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiSimpleGetSerialPortsConstMeta =>
      const TaskConstMeta(debugName: "get_serial_ports", argNames: []);

  @override
  String crateApiSimpleGreet({required String name}) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(name, serializer);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 74)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_String,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiSimpleGreetConstMeta,
        argValues: [name],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiSimpleGreetConstMeta =>
      const TaskConstMeta(debugName: "greet", argNames: ["name"]);

  @override
  Future<void> crateApiSimpleInitApp() {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 75,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiSimpleInitAppConstMeta,
        argValues: [],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiSimpleInitAppConstMeta =>
      const TaskConstMeta(debugName: "init_app", argNames: []);

  @override
  String crateApiGcodeJog({
    required double xDist,
    required double yDist,
    required CutterSettings cutterSettings,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_f_32(xDist, serializer);
          sse_encode_f_32(yDist, serializer);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCutterSettings(
            cutterSettings,
            serializer,
          );
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 76)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_String,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiGcodeJogConstMeta,
        argValues: [xDist, yDist, cutterSettings],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiGcodeJogConstMeta => const TaskConstMeta(
    debugName: "jog",
    argNames: ["xDist", "yDist", "cutterSettings"],
  );

  @override
  MachinePosition crateApiSenderMachinePositionNew() {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 77)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_machine_position,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiSenderMachinePositionNewConstMeta,
        argValues: [],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiSenderMachinePositionNewConstMeta =>
      const TaskConstMeta(debugName: "machine_position_new", argNames: []);

  @override
  Future<MachineStatus> crateApiStatusParseStatus({
    required String statusString,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(statusString, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 78,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMachineStatus,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiStatusParseStatusConstMeta,
        argValues: [statusString],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiStatusParseStatusConstMeta => const TaskConstMeta(
    debugName: "parse_status",
    argNames: ["statusString"],
  );

  @override
  Future<void> crateApiStatusRuleAllRules() {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 79,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiStatusRuleAllRulesConstMeta,
        argValues: [],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiStatusRuleAllRulesConstMeta =>
      const TaskConstMeta(debugName: "rule_all_rules", argNames: []);

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_Cut => wire
      .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCut;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_Cut => wire
      .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCut;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_CutMethod => wire
      .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCutMethod;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_CutMethod => wire
      .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCutMethod;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_CutterSettings => wire
      .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCutterSettings;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_CutterSettings => wire
      .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCutterSettings;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_Gcode => wire
      .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerGcode;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_Gcode => wire
      .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerGcode;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_MachineConnection => wire
      .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMachineConnection;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_MachineConnection => wire
      .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMachineConnection;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_MachineStatus => wire
      .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMachineStatus;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_MachineStatus => wire
      .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMachineStatus;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_Pos2D => wire
      .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPos2D;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_Pos2D => wire
      .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPos2D;

  @protected
  AnyhowException dco_decode_AnyhowException(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return AnyhowException(raw as String);
  }

  @protected
  Cut
  dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCut(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return CutImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  CutMethod
  dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCutMethod(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return CutMethodImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  CutterSettings
  dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCutterSettings(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return CutterSettingsImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  Gcode
  dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerGcode(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return GcodeImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  MachineConnection
  dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMachineConnection(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return MachineConnectionImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  MachineStatus
  dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMachineStatus(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return MachineStatusImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  Pos2D
  dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPos2D(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return Pos2DImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  Cut
  dco_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCut(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return CutImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  CutterSettings
  dco_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCutterSettings(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return CutterSettingsImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  Gcode
  dco_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerGcode(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return GcodeImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  MachineConnection
  dco_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMachineConnection(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return MachineConnectionImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  MachineStatus
  dco_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMachineStatus(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return MachineStatusImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  Pos2D
  dco_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPos2D(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return Pos2DImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  Cut
  dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCut(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return CutImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  CutterSettings
  dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCutterSettings(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return CutterSettingsImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  Gcode
  dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerGcode(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return GcodeImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  MachineConnection
  dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMachineConnection(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return MachineConnectionImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  MachineStatus
  dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMachineStatus(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return MachineStatusImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  Pos2D
  dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPos2D(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return Pos2DImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  Cut
  dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCut(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return CutImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  CutMethod
  dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCutMethod(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return CutMethodImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  CutterSettings
  dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCutterSettings(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return CutterSettingsImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  Gcode
  dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerGcode(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return GcodeImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  MachineConnection
  dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMachineConnection(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return MachineConnectionImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  MachineStatus
  dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMachineStatus(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return MachineStatusImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  Pos2D
  dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPos2D(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return Pos2DImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  RustStreamSink<MachinePosition> dco_decode_StreamSink_machine_position_Sse(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    throw UnimplementedError();
  }

  @protected
  String dco_decode_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as String;
  }

  @protected
  bool dco_decode_bool(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as bool;
  }

  @protected
  double dco_decode_f_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as double;
  }

  @protected
  int dco_decode_i_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  List<String> dco_decode_list_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_String).toList();
  }

  @protected
  Uint8List dco_decode_list_prim_u_8_strict(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as Uint8List;
  }

  @protected
  MachinePosition dco_decode_machine_position(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return MachinePosition.raw(
      x: dco_decode_f_32(arr[0]),
      y: dco_decode_f_32(arr[1]),
    );
  }

  @protected
  MachineState dco_decode_machine_state(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return MachineState.values[raw as int];
  }

  @protected
  PositioningMode dco_decode_positioning_mode(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return PositioningMode.values[raw as int];
  }

  @protected
  (double, double) dco_decode_record_f_32_f_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2) {
      throw Exception('Expected 2 elements, got ${arr.length}');
    }
    return (dco_decode_f_32(arr[0]), dco_decode_f_32(arr[1]));
  }

  @protected
  Rule dco_decode_rule(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return Rule.values[raw as int];
  }

  @protected
  int dco_decode_u_8(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  void dco_decode_unit(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return;
  }

  @protected
  BigInt dco_decode_usize(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dcoDecodeU64(raw);
  }

  @protected
  AnyhowException sse_decode_AnyhowException(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_String(deserializer);
    return AnyhowException(inner);
  }

  @protected
  Cut
  sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCut(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return CutImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  CutMethod
  sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCutMethod(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return CutMethodImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  CutterSettings
  sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCutterSettings(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return CutterSettingsImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  Gcode
  sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerGcode(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return GcodeImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  MachineConnection
  sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMachineConnection(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return MachineConnectionImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  MachineStatus
  sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMachineStatus(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return MachineStatusImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  Pos2D
  sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPos2D(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return Pos2DImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  Cut
  sse_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCut(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return CutImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  CutterSettings
  sse_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCutterSettings(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return CutterSettingsImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  Gcode
  sse_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerGcode(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return GcodeImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  MachineConnection
  sse_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMachineConnection(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return MachineConnectionImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  MachineStatus
  sse_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMachineStatus(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return MachineStatusImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  Pos2D
  sse_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPos2D(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return Pos2DImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  Cut
  sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCut(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return CutImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  CutterSettings
  sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCutterSettings(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return CutterSettingsImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  Gcode
  sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerGcode(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return GcodeImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  MachineConnection
  sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMachineConnection(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return MachineConnectionImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  MachineStatus
  sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMachineStatus(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return MachineStatusImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  Pos2D
  sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPos2D(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return Pos2DImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  Cut
  sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCut(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return CutImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  CutMethod
  sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCutMethod(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return CutMethodImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  CutterSettings
  sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCutterSettings(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return CutterSettingsImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  Gcode
  sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerGcode(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return GcodeImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  MachineConnection
  sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMachineConnection(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return MachineConnectionImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  MachineStatus
  sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMachineStatus(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return MachineStatusImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  Pos2D
  sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPos2D(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return Pos2DImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  RustStreamSink<MachinePosition> sse_decode_StreamSink_machine_position_Sse(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    throw UnimplementedError('Unreachable ()');
  }

  @protected
  String sse_decode_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_prim_u_8_strict(deserializer);
    return utf8.decoder.convert(inner);
  }

  @protected
  bool sse_decode_bool(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8() != 0;
  }

  @protected
  double sse_decode_f_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getFloat32();
  }

  @protected
  int sse_decode_i_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getInt32();
  }

  @protected
  List<String> sse_decode_list_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <String>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_String(deserializer));
    }
    return ans_;
  }

  @protected
  Uint8List sse_decode_list_prim_u_8_strict(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getUint8List(len_);
  }

  @protected
  MachinePosition sse_decode_machine_position(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_x = sse_decode_f_32(deserializer);
    var var_y = sse_decode_f_32(deserializer);
    return MachinePosition.raw(x: var_x, y: var_y);
  }

  @protected
  MachineState sse_decode_machine_state(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_i_32(deserializer);
    return MachineState.values[inner];
  }

  @protected
  PositioningMode sse_decode_positioning_mode(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_i_32(deserializer);
    return PositioningMode.values[inner];
  }

  @protected
  (double, double) sse_decode_record_f_32_f_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 = sse_decode_f_32(deserializer);
    var var_field1 = sse_decode_f_32(deserializer);
    return (var_field0, var_field1);
  }

  @protected
  Rule sse_decode_rule(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_i_32(deserializer);
    return Rule.values[inner];
  }

  @protected
  int sse_decode_u_8(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8();
  }

  @protected
  void sse_decode_unit(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  BigInt sse_decode_usize(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getBigUint64();
  }

  @protected
  void sse_encode_AnyhowException(
    AnyhowException self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.message, serializer);
  }

  @protected
  void
  sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCut(
    Cut self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as CutImpl).frbInternalSseEncode(move: true),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCutMethod(
    CutMethod self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as CutMethodImpl).frbInternalSseEncode(move: true),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCutterSettings(
    CutterSettings self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as CutterSettingsImpl).frbInternalSseEncode(move: true),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerGcode(
    Gcode self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as GcodeImpl).frbInternalSseEncode(move: true),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMachineConnection(
    MachineConnection self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as MachineConnectionImpl).frbInternalSseEncode(move: true),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMachineStatus(
    MachineStatus self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as MachineStatusImpl).frbInternalSseEncode(move: true),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPos2D(
    Pos2D self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as Pos2DImpl).frbInternalSseEncode(move: true),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCut(
    Cut self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as CutImpl).frbInternalSseEncode(move: false),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCutterSettings(
    CutterSettings self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as CutterSettingsImpl).frbInternalSseEncode(move: false),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerGcode(
    Gcode self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as GcodeImpl).frbInternalSseEncode(move: false),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMachineConnection(
    MachineConnection self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as MachineConnectionImpl).frbInternalSseEncode(move: false),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMachineStatus(
    MachineStatus self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as MachineStatusImpl).frbInternalSseEncode(move: false),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPos2D(
    Pos2D self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as Pos2DImpl).frbInternalSseEncode(move: false),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCut(
    Cut self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as CutImpl).frbInternalSseEncode(move: false),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCutterSettings(
    CutterSettings self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as CutterSettingsImpl).frbInternalSseEncode(move: false),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerGcode(
    Gcode self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as GcodeImpl).frbInternalSseEncode(move: false),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMachineConnection(
    MachineConnection self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as MachineConnectionImpl).frbInternalSseEncode(move: false),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMachineStatus(
    MachineStatus self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as MachineStatusImpl).frbInternalSseEncode(move: false),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPos2D(
    Pos2D self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as Pos2DImpl).frbInternalSseEncode(move: false),
      serializer,
    );
  }

  @protected
  void
  sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCut(
    Cut self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as CutImpl).frbInternalSseEncode(move: null),
      serializer,
    );
  }

  @protected
  void
  sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCutMethod(
    CutMethod self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as CutMethodImpl).frbInternalSseEncode(move: null),
      serializer,
    );
  }

  @protected
  void
  sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCutterSettings(
    CutterSettings self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as CutterSettingsImpl).frbInternalSseEncode(move: null),
      serializer,
    );
  }

  @protected
  void
  sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerGcode(
    Gcode self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as GcodeImpl).frbInternalSseEncode(move: null),
      serializer,
    );
  }

  @protected
  void
  sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMachineConnection(
    MachineConnection self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as MachineConnectionImpl).frbInternalSseEncode(move: null),
      serializer,
    );
  }

  @protected
  void
  sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMachineStatus(
    MachineStatus self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as MachineStatusImpl).frbInternalSseEncode(move: null),
      serializer,
    );
  }

  @protected
  void
  sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPos2D(
    Pos2D self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as Pos2DImpl).frbInternalSseEncode(move: null),
      serializer,
    );
  }

  @protected
  void sse_encode_StreamSink_machine_position_Sse(
    RustStreamSink<MachinePosition> self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(
      self.setupAndSerialize(
        codec: SseCodec(
          decodeSuccessData: sse_decode_machine_position,
          decodeErrorData: sse_decode_AnyhowException,
        ),
      ),
      serializer,
    );
  }

  @protected
  void sse_encode_String(String self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_prim_u_8_strict(utf8.encoder.convert(self), serializer);
  }

  @protected
  void sse_encode_bool(bool self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self ? 1 : 0);
  }

  @protected
  void sse_encode_f_32(double self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putFloat32(self);
  }

  @protected
  void sse_encode_i_32(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putInt32(self);
  }

  @protected
  void sse_encode_list_String(List<String> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_String(item, serializer);
    }
  }

  @protected
  void sse_encode_list_prim_u_8_strict(
    Uint8List self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    serializer.buffer.putUint8List(self);
  }

  @protected
  void sse_encode_machine_position(
    MachinePosition self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_f_32(self.x, serializer);
    sse_encode_f_32(self.y, serializer);
  }

  @protected
  void sse_encode_machine_state(MachineState self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.index, serializer);
  }

  @protected
  void sse_encode_positioning_mode(
    PositioningMode self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.index, serializer);
  }

  @protected
  void sse_encode_record_f_32_f_32(
    (double, double) self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_f_32(self.$1, serializer);
    sse_encode_f_32(self.$2, serializer);
  }

  @protected
  void sse_encode_rule(Rule self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.index, serializer);
  }

  @protected
  void sse_encode_u_8(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self);
  }

  @protected
  void sse_encode_unit(void self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  void sse_encode_usize(BigInt self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putBigUint64(self);
  }
}

@sealed
class CutImpl extends RustOpaque implements Cut {
  // Not to be used by end users
  CutImpl.frbInternalDcoDecode(List<dynamic> wire)
    : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  CutImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
    : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_Cut,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_Cut,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_CutPtr,
  );

  double get cutAngle =>
      RustLib.instance.api.crateApiCutCutAutoAccessorGetCutAngle(that: this);

  double get cutFeedrate =>
      RustLib.instance.api.crateApiCutCutAutoAccessorGetCutFeedrate(that: this);

  Pos2D get endPosition =>
      RustLib.instance.api.crateApiCutCutAutoAccessorGetEndPosition(that: this);

  double get pierceDelay =>
      RustLib.instance.api.crateApiCutCutAutoAccessorGetPierceDelay(that: this);

  double get pierceDelay2 => RustLib.instance.api
      .crateApiCutCutAutoAccessorGetPierceDelay2(that: this);

  Pos2D get startPosition => RustLib.instance.api
      .crateApiCutCutAutoAccessorGetStartPosition(that: this);

  double get tubeWidth =>
      RustLib.instance.api.crateApiCutCutAutoAccessorGetTubeWidth(that: this);

  set cutAngle(double cutAngle) => RustLib.instance.api
      .crateApiCutCutAutoAccessorSetCutAngle(that: this, cutAngle: cutAngle);

  set cutFeedrate(double cutFeedrate) =>
      RustLib.instance.api.crateApiCutCutAutoAccessorSetCutFeedrate(
        that: this,
        cutFeedrate: cutFeedrate,
      );

  set endPosition(Pos2D endPosition) =>
      RustLib.instance.api.crateApiCutCutAutoAccessorSetEndPosition(
        that: this,
        endPosition: endPosition,
      );

  set pierceDelay(double pierceDelay) =>
      RustLib.instance.api.crateApiCutCutAutoAccessorSetPierceDelay(
        that: this,
        pierceDelay: pierceDelay,
      );

  set pierceDelay2(double pierceDelay2) =>
      RustLib.instance.api.crateApiCutCutAutoAccessorSetPierceDelay2(
        that: this,
        pierceDelay2: pierceDelay2,
      );

  set startPosition(Pos2D startPosition) =>
      RustLib.instance.api.crateApiCutCutAutoAccessorSetStartPosition(
        that: this,
        startPosition: startPosition,
      );

  set tubeWidth(double tubeWidth) => RustLib.instance.api
      .crateApiCutCutAutoAccessorSetTubeWidth(that: this, tubeWidth: tubeWidth);

  (double, double) getEndPos() =>
      RustLib.instance.api.crateApiCutCutGetEndPos(that: this);

  void setCutAngle({required double newAngle}) => RustLib.instance.api
      .crateApiCutCutSetCutAngle(that: this, newAngle: newAngle);

  void setCutFeedrate({required double newFeedrate}) => RustLib.instance.api
      .crateApiCutCutSetCutFeedrate(that: this, newFeedrate: newFeedrate);

  void setPierceDelay({required double newDelay}) => RustLib.instance.api
      .crateApiCutCutSetPierceDelay(that: this, newDelay: newDelay);

  void setPierceDelay2({required double newDelay}) => RustLib.instance.api
      .crateApiCutCutSetPierceDelay2(that: this, newDelay: newDelay);

  void setTubeWidth({required double newWidth}) => RustLib.instance.api
      .crateApiCutCutSetTubeWidth(that: this, newWidth: newWidth);
}

@sealed
class CutMethodImpl extends RustOpaque implements CutMethod {
  // Not to be used by end users
  CutMethodImpl.frbInternalDcoDecode(List<dynamic> wire)
    : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  CutMethodImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
    : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_CutMethod,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_CutMethod,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_CutMethodPtr,
  );
}

@sealed
class CutterSettingsImpl extends RustOpaque implements CutterSettings {
  // Not to be used by end users
  CutterSettingsImpl.frbInternalDcoDecode(List<dynamic> wire)
    : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  CutterSettingsImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
    : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_CutterSettings,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_CutterSettings,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_CutterSettingsPtr,
  );

  bool get clearExistingGcode => RustLib.instance.api
      .crateApiSettingsCutterSettingsAutoAccessorGetClearExistingGcode(
        that: this,
      );

  CutMethod get cutMethod => RustLib.instance.api
      .crateApiSettingsCutterSettingsAutoAccessorGetCutMethod(that: this);

  bool get homeAfterCut => RustLib.instance.api
      .crateApiSettingsCutterSettingsAutoAccessorGetHomeAfterCut(that: this);

  double get jogSpeed => RustLib.instance.api
      .crateApiSettingsCutterSettingsAutoAccessorGetJogSpeed(that: this);

  double get laserOffsetX => RustLib.instance.api
      .crateApiSettingsCutterSettingsAutoAccessorGetLaserOffsetX(that: this);

  double get laserOffsetY => RustLib.instance.api
      .crateApiSettingsCutterSettingsAutoAccessorGetLaserOffsetY(that: this);

  bool get useLaser => RustLib.instance.api
      .crateApiSettingsCutterSettingsAutoAccessorGetUseLaser(that: this);

  set clearExistingGcode(bool clearExistingGcode) => RustLib.instance.api
      .crateApiSettingsCutterSettingsAutoAccessorSetClearExistingGcode(
        that: this,
        clearExistingGcode: clearExistingGcode,
      );

  set cutMethod(CutMethod cutMethod) => RustLib.instance.api
      .crateApiSettingsCutterSettingsAutoAccessorSetCutMethod(
        that: this,
        cutMethod: cutMethod,
      );

  set homeAfterCut(bool homeAfterCut) => RustLib.instance.api
      .crateApiSettingsCutterSettingsAutoAccessorSetHomeAfterCut(
        that: this,
        homeAfterCut: homeAfterCut,
      );

  set jogSpeed(double jogSpeed) => RustLib.instance.api
      .crateApiSettingsCutterSettingsAutoAccessorSetJogSpeed(
        that: this,
        jogSpeed: jogSpeed,
      );

  set laserOffsetX(double laserOffsetX) => RustLib.instance.api
      .crateApiSettingsCutterSettingsAutoAccessorSetLaserOffsetX(
        that: this,
        laserOffsetX: laserOffsetX,
      );

  set laserOffsetY(double laserOffsetY) => RustLib.instance.api
      .crateApiSettingsCutterSettingsAutoAccessorSetLaserOffsetY(
        that: this,
        laserOffsetY: laserOffsetY,
      );

  set useLaser(bool useLaser) => RustLib.instance.api
      .crateApiSettingsCutterSettingsAutoAccessorSetUseLaser(
        that: this,
        useLaser: useLaser,
      );

  void save() =>
      RustLib.instance.api.crateApiSettingsCutterSettingsSave(that: this);
}

@sealed
class GcodeImpl extends RustOpaque implements Gcode {
  // Not to be used by end users
  GcodeImpl.frbInternalDcoDecode(List<dynamic> wire)
    : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  GcodeImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
    : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_Gcode,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_Gcode,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_GcodePtr,
  );

  Future<void> addCommand({required String gCommand}) => RustLib.instance.api
      .crateApiGcodeGcodeAddCommand(that: this, gCommand: gCommand);

  Future<void> addCommandComment({
    required String gCommand,
    required String gComment,
  }) => RustLib.instance.api.crateApiGcodeGcodeAddCommandComment(
    that: this,
    gCommand: gCommand,
    gComment: gComment,
  );

  void addCut({required Cut tubeCut, required CutterSettings cutterSettings}) =>
      RustLib.instance.api.crateApiGcodeGcodeAddCut(
        that: this,
        tubeCut: tubeCut,
        cutterSettings: cutterSettings,
      );

  String get gcodeString => RustLib.instance.api
      .crateApiGcodeGcodeAutoAccessorGetGcodeString(that: this);

  set gcodeString(String gcodeString) =>
      RustLib.instance.api.crateApiGcodeGcodeAutoAccessorSetGcodeString(
        that: this,
        gcodeString: gcodeString,
      );

  Future<void> dwell({required double dwellTime}) => RustLib.instance.api
      .crateApiGcodeGcodeDwell(that: this, dwellTime: dwellTime);

  String getGcodeString() =>
      RustLib.instance.api.crateApiGcodeGcodeGetGcodeString(that: this);

  Future<void> home2D({required double feedrate}) => RustLib.instance.api
      .crateApiGcodeGcodeHome2D(that: this, feedrate: feedrate);

  Future<void> moveXy({required Pos2D newPos, required double feedrate}) =>
      RustLib.instance.api.crateApiGcodeGcodeMoveXy(
        that: this,
        newPos: newPos,
        feedrate: feedrate,
      );

  Future<void> setPlasmaEnabled({required bool enabled}) => RustLib.instance.api
      .crateApiGcodeGcodeSetPlasmaEnabled(that: this, enabled: enabled);

  Future<void> setPositioningMode({required PositioningMode positioningMode}) =>
      RustLib.instance.api.crateApiGcodeGcodeSetPositioningMode(
        that: this,
        positioningMode: positioningMode,
      );

  Future<void> setZero() =>
      RustLib.instance.api.crateApiGcodeGcodeSetZero(that: this);

  Future<void> writeToFile({required String filename}) => RustLib.instance.api
      .crateApiGcodeGcodeWriteToFile(that: this, filename: filename);
}

@sealed
class MachineConnectionImpl extends RustOpaque implements MachineConnection {
  // Not to be used by end users
  MachineConnectionImpl.frbInternalDcoDecode(List<dynamic> wire)
    : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  MachineConnectionImpl.frbInternalSseDecode(
    BigInt ptr,
    int externalSizeOnNative,
  ) : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_MachineConnection,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_MachineConnection,
    rustArcDecrementStrongCountPtr: RustLib
        .instance
        .api
        .rust_arc_decrement_strong_count_MachineConnectionPtr,
  );

  void home({required CutterSettings cutterSettings}) =>
      RustLib.instance.api.crateApiSenderMachineConnectionHome(
        that: this,
        cutterSettings: cutterSettings,
      );

  Stream<MachinePosition> makeConnection() => RustLib.instance.api
      .crateApiSenderMachineConnectionMakeConnection(that: this);

  void sendGcodeCommand({required String command}) =>
      RustLib.instance.api.crateApiSenderMachineConnectionSendGcodeCommand(
        that: this,
        command: command,
      );

  void sendStringCommand({required String command}) =>
      RustLib.instance.api.crateApiSenderMachineConnectionSendStringCommand(
        that: this,
        command: command,
      );

  void sendStringCommandLowPriority({required String command}) => RustLib
      .instance
      .api
      .crateApiSenderMachineConnectionSendStringCommandLowPriority(
        that: this,
        command: command,
      );

  void setSerialPort({required String newPort}) =>
      RustLib.instance.api.crateApiSenderMachineConnectionSetSerialPort(
        that: this,
        newPort: newPort,
      );
}

@sealed
class MachineStatusImpl extends RustOpaque implements MachineStatus {
  // Not to be used by end users
  MachineStatusImpl.frbInternalDcoDecode(List<dynamic> wire)
    : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  MachineStatusImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
    : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_MachineStatus,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_MachineStatus,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_MachineStatusPtr,
  );

  MachineState get machineState => RustLib.instance.api
      .crateApiStatusMachineStatusAutoAccessorGetMachineState(that: this);

  Pos2D get position => RustLib.instance.api
      .crateApiStatusMachineStatusAutoAccessorGetPosition(that: this);

  set machineState(MachineState machineState) => RustLib.instance.api
      .crateApiStatusMachineStatusAutoAccessorSetMachineState(
        that: this,
        machineState: machineState,
      );

  set position(Pos2D position) =>
      RustLib.instance.api.crateApiStatusMachineStatusAutoAccessorSetPosition(
        that: this,
        position: position,
      );
}

@sealed
class Pos2DImpl extends RustOpaque implements Pos2D {
  // Not to be used by end users
  Pos2DImpl.frbInternalDcoDecode(List<dynamic> wire)
    : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  Pos2DImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
    : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_Pos2D,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_Pos2D,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_Pos2DPtr,
  );

  double get x =>
      RustLib.instance.api.crateApiGcodePos2DAutoAccessorGetX(that: this);

  double get y =>
      RustLib.instance.api.crateApiGcodePos2DAutoAccessorGetY(that: this);

  set x(double x) =>
      RustLib.instance.api.crateApiGcodePos2DAutoAccessorSetX(that: this, x: x);

  set y(double y) =>
      RustLib.instance.api.crateApiGcodePos2DAutoAccessorSetY(that: this, y: y);

  Future<Pos2D> toScreenSpace({
    required double tubeWidth,
    required double scaleFactor,
  }) => RustLib.instance.api.crateApiGcodePos2DToScreenSpace(
    that: this,
    tubeWidth: tubeWidth,
    scaleFactor: scaleFactor,
  );
}
